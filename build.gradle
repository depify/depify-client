buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url "http://maven.restlet.org" }
    maven { url "http://developer.marklogic.com/maven2" }
  }
  dependencies {
    classpath 'com.thaiopensource:jing:20091111'
    classpath group: 'com.xmlcalabash', name:'xmlcalabash', version:'1.1+'
    classpath 'com.bmuschko:gradle-izpack-plugin:2.0'
  }
}

plugins {
  id "java"
  id "maven"
  id "com.bmuschko.izpack" version "2.0"
  id "de.undercouch.download" version "1.2"
}

//defaultTasks 'assemble', 'test'
//ant.importBuild 'build.xml'

import de.undercouch.gradle.tasks.download.Download

repositories {
  mavenCentral()
  jcenter()
  maven { url "http://maven.restlet.org" }
  maven { url "http://developer.marklogic.com/maven2" }
}

dependencies {
    izpack 'org.codehaus.izpack:izpack-standalone-compiler:4.3.4'
    compile (
    [group: 'com.xmlcalabash', name:'xmlcalabash', version:'1.1+'])
}

project.ext.releaseVersion = version

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import com.xmlcalabash.drivers.Main

class xprocspecTask extends DefaultTask {

@Input
String xspecSource

@Input
String htmlReport

@Input
String junitReport

@Input
String xmlReport

@TaskAction
  def calabashAction() {
    def args = [
        "-isource="+xspecSource,
    	"-oresult="+xmlReport,
    	"-ohtml="+htmlReport,
        "-ojunit="+junitReport,
      	"test/xprocspec/xprocspec/src/main/resources/content/xml/xproc/xprocspec.xpl"
    ]
    Main.main(args as String[])
  }
}
task testClient(type: xprocspecTask) {
 outputs.upToDateWhen {false}

     xspecSource="test/test.xprocspec"
     htmlReport="$buildDir/test/target/test.html"
     junitReport="$buildDir/test/target/test-junint.xml"
     xmlReport="$buildDir/test/target/text.xml"
}

test.dependsOn(testClient)

izpack {
  baseDir = file("$buildDir/dist")
  installFile = file("etc/install.xml")
  outputFile = file("$buildDir/distributions/depify-" + version + ".jar")
}

task generateVERSION() <<{
  def outputFile = new File("$buildDir/dist", "VERSION")
  outputFile.withPrintWriter { writer ->
    writer.println version
  }
}

task copyStuff(type: Copy) {
  from 'LICENSE'
  from 'src/client/commandline/depify'
  from 'src/client/commandline/depify.bat'
  from 'etc/saxon.xml'
  from 'etc/xmlcalabash.xml'
  from 'etc/resolver.properties'
  from 'etc/catalog.xml'
  into "$buildDir/dist/"
}

task copyXProc(type: Copy) {
  from 'src/client/xproc'
  into "$buildDir/dist/lib/xproc"
}

task copyLib(type: Copy) {
  FileCollection runtime  = configurations.runtime
  FileCollection lib = runtime
  from lib
  into { "$buildDir/dist/lib/xmlcalabash/lib" }
}

task renameJar(type: Copy)  {
 from("$buildDir/dist/lib/xmlcalabash/lib") {
    include "xmlcalabash-*.jar"
    rename 'xmlcalabash-.*.jar','calabash.jar'
 }
 into { "$buildDir/dist/lib/xmlcalabash" }
}

task removeJar(type: Delete) <<{
    FileTree tree = fileTree (dir: "build/dist/lib/xmlcalabash/lib");  
    tree.include "xmlcalabash-*.jar"  
    //tree.include "saxon-8.7.jar"  
    tree.each { File file ->    
        delete(file)  
    }
}

task copyToDist(dependsOn: [generateVERSION,copyStuff,copyXProc,copyLib,renameJar])<< {
}

copyToDist.dependsOn(generateVERSION)

task makeDist(dependsOn: [copyToDist,izPackCreateInstaller ]) << {
  println "Created distribution in build/dist"
}

task dist(dependsOn:makeDist){
}

izPackCreateInstaller.dependsOn(removeJar)